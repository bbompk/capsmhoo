// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/proj.proto

package projectpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	GetProjectById(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*Project, error)
	GetProjectByTeamId(ctx context.Context, in *TeamId, opts ...grpc.CallOption) (*Project, error)
	GetProjectByProfessorId(ctx context.Context, in *ProfessorId, opts ...grpc.CallOption) (*ProjectList, error)
	GetAllProjects(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProjectList, error)
	CreateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	UpdateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error)
	DeleteProject(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*Project, error)
	GetProjectRequestsByProjectId(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*ProjectRequestList, error)
	CreateProjectRequest(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectRequest, error)
	AcceptProjectRequest(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	RejectProjectRequest(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GetProjectById(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/GetProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectByTeamId(ctx context.Context, in *TeamId, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/GetProjectByTeamId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectByProfessorId(ctx context.Context, in *ProfessorId, opts ...grpc.CallOption) (*ProjectList, error) {
	out := new(ProjectList)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/GetProjectByProfessorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetAllProjects(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProjectList, error) {
	out := new(ProjectList)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/GetAllProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProject(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProject(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectRequestsByProjectId(ctx context.Context, in *ProjectId, opts ...grpc.CallOption) (*ProjectRequestList, error) {
	out := new(ProjectRequestList)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/GetProjectRequestsByProjectId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProjectRequest(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectRequest, error) {
	out := new(ProjectRequest)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/CreateProjectRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AcceptProjectRequest(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/AcceptProjectRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RejectProjectRequest(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/projectpb.ProjectService/RejectProjectRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	GetProjectById(context.Context, *ProjectId) (*Project, error)
	GetProjectByTeamId(context.Context, *TeamId) (*Project, error)
	GetProjectByProfessorId(context.Context, *ProfessorId) (*ProjectList, error)
	GetAllProjects(context.Context, *Empty) (*ProjectList, error)
	CreateProject(context.Context, *Project) (*Project, error)
	UpdateProject(context.Context, *Project) (*Project, error)
	DeleteProject(context.Context, *ProjectId) (*Project, error)
	GetProjectRequestsByProjectId(context.Context, *ProjectId) (*ProjectRequestList, error)
	CreateProjectRequest(context.Context, *ProjectRequest) (*ProjectRequest, error)
	AcceptProjectRequest(context.Context, *ProjectRequest) (*SuccessResponse, error)
	RejectProjectRequest(context.Context, *ProjectRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) GetProjectById(context.Context, *ProjectId) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectById not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectByTeamId(context.Context, *TeamId) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByTeamId not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectByProfessorId(context.Context, *ProfessorId) (*ProjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectByProfessorId not implemented")
}
func (UnimplementedProjectServiceServer) GetAllProjects(context.Context, *Empty) (*ProjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProjects not implemented")
}
func (UnimplementedProjectServiceServer) CreateProject(context.Context, *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProject(context.Context, *Project) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProject(context.Context, *ProjectId) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectRequestsByProjectId(context.Context, *ProjectId) (*ProjectRequestList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectRequestsByProjectId not implemented")
}
func (UnimplementedProjectServiceServer) CreateProjectRequest(context.Context, *ProjectRequest) (*ProjectRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectRequest not implemented")
}
func (UnimplementedProjectServiceServer) AcceptProjectRequest(context.Context, *ProjectRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProjectRequest not implemented")
}
func (UnimplementedProjectServiceServer) RejectProjectRequest(context.Context, *ProjectRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectProjectRequest not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_GetProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/GetProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectById(ctx, req.(*ProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectByTeamId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectByTeamId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/GetProjectByTeamId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectByTeamId(ctx, req.(*TeamId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectByProfessorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfessorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectByProfessorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/GetProjectByProfessorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectByProfessorId(ctx, req.(*ProfessorId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/GetAllProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetAllProjects(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProject(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProject(ctx, req.(*ProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectRequestsByProjectId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectRequestsByProjectId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/GetProjectRequestsByProjectId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectRequestsByProjectId(ctx, req.(*ProjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProjectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProjectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/CreateProjectRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProjectRequest(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AcceptProjectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AcceptProjectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/AcceptProjectRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AcceptProjectRequest(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RejectProjectRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RejectProjectRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/projectpb.ProjectService/RejectProjectRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RejectProjectRequest(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "projectpb.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProjectById",
			Handler:    _ProjectService_GetProjectById_Handler,
		},
		{
			MethodName: "GetProjectByTeamId",
			Handler:    _ProjectService_GetProjectByTeamId_Handler,
		},
		{
			MethodName: "GetProjectByProfessorId",
			Handler:    _ProjectService_GetProjectByProfessorId_Handler,
		},
		{
			MethodName: "GetAllProjects",
			Handler:    _ProjectService_GetAllProjects_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectService_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectService_DeleteProject_Handler,
		},
		{
			MethodName: "GetProjectRequestsByProjectId",
			Handler:    _ProjectService_GetProjectRequestsByProjectId_Handler,
		},
		{
			MethodName: "CreateProjectRequest",
			Handler:    _ProjectService_CreateProjectRequest_Handler,
		},
		{
			MethodName: "AcceptProjectRequest",
			Handler:    _ProjectService_AcceptProjectRequest_Handler,
		},
		{
			MethodName: "RejectProjectRequest",
			Handler:    _ProjectService_RejectProjectRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proj.proto",
}
